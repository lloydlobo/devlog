#+TITLE: Devlog
#+AUTHOR: lloydlobo
#+DESCRIPTION: Developer Log Notes
#+STARTUP: fold
#+OPTIONS: num:nil ^:{}
-----

* Table of Contents :TOC:
- [[#--------------------------][--------------------------]]
- [[#automation][automation]]
  - [[#entr][entr]]
- [[#back-end][back-end]]
  - [[#express][EXPRESS]]
  - [[#go][GO]]
  - [[#nodejs][NODEJS]]
- [[#best-practices][best practices]]
  - [[#practical-go-real-world-advice-for-writing-maintainable-go-programs][Practical Go: Real world advice for writing maintainable Go programs]]
  - [[#httpdevscloudimmunitycomgotchas-and-common-mistakes-in-go-golang][http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/]]
- [[#command-line-interface][command line interface]]
  - [[#command][COMMAND]]
- [[#database][database]]
  - [[#paradigms][PARADIGMS]]
  - [[#tools][TOOLS]]
- [[#front-end][front-end]]
  - [[#angular][ANGULAR]]
  - [[#react][REACT]]
  - [[#svelte][SVELTE]]
- [[#git][git]]
  - [[#setup][SETUP]]
  - [[#workflow][WORKFLOW]]
- [[#git-hosting][git hosting]]
  - [[#github][GITHUB]]
  - [[#gitlab][GITLAB]]
- [[#languages][languages]]
  - [[#compiled-language][COMPILED LANGUAGE]]
  - [[#interpreted-language][INTERPRETED LANGUAGE]]
  - [[#markup-language][MARKUP LANGUAGE]]
- [[#servers][servers]]
  - [[#hosting][HOSTING]]
- [[#tools-1][tools]]
  - [[#text-editors][TEXT EDITORS]]
- [[#unix][unix]]
  - [[#shells][SHELLS]]
  - [[#kernel][KERNEL]]

* --------------------------
* automation
** entr
*** About entr
#+begin_example
  Run arbitrary commands when files change.
  More information: <https://manned.org/entr>.
  Rebuild with `make` if any file in any subdirectory changes:
      ag -l | entr make
  Rebuild and test with `make` if any `.c` source files in the current directory change:
      ls *.c | entr 'make && make test'
  Send a `SIGTERM` to any previously spawned ruby subprocesses before executing `ruby main.rb`:
      ls *.rb | entr -r ruby main.rb
  Run a command with the changed file (`/_`) as an argument:
      ls *.sql | entr psql -f /_
#+end_example

*** Concurrent tests on file change:
**** Compile and Build the binary.
***** With go
#+begin_src shell
#!/usr/bin/env bash

# Run a command with the changed file (`/_`) as an argument:
ls *.go | entr go test -v
#+end_src
***** With gcc
#+begin_src shell
#!/usr/bin/env bash
ls *.c | entr gcc main.c -o main
#+end_src
***** With make
#+begin_src shell
#!/usr/bin/env bash
ls *.c | entr make main
#+end_src
**** How to use entr?
https://stackoverflow.com/questions/66857291/how-to-execute-a-shell-script-when-a-file-changes

- You first list out the files that you are watching, then pipe the list into the entr command.
  - Basically, if you have a example.txt file and you want to monitor it and execute a command whenever it is changed, use this command.

#+begin_src shell
#!/usr/bin/env bash
ls example.txt | entr echo "watching..."
#+end_src

- Another basic usage is that you first define your bash script and make it executable, then run this command.

#+begin_src shell
#!/usr/bin/env bash
find . -type f | entr "./run.sh"
#+end_src
- find . -type f returns a list of files inside the current directory recursively. The result is then pipe into the entr command, executing the script run.sh.
*** Flags
**** -p | Postpones the first execution of the utility until a file is modified.
***** Run a command with the changed file (`/_`) as an argument:
https://www.systutorials.com/docs/linux/man/1-entr/
#+begin_src shell
#!/usr/bin/env bash
ls *.c | entr -p ./main
#+end_src

* back-end
** EXPRESS
** GO
** NODEJS

* best practices
** Practical Go: Real world advice for writing maintainable Go programs
https://dave.cheney.net/practical-go/presentations/qcon-china.html
*** Guiding principles
**** 1.1. Simplicity
**** 1.2. Readability
**** 1.3. Productivity
*** Identifiers
**** 2.1. Choose identifiers for clarity, not brevity
**** 2.2. Identifier length
**** 2.3. Don‚Äôt name your variables for their types
**** 2.4. Use a consistent naming style
**** 2.5. Use a consistent declaration style
**** 2.6. Be a team player
*** Comments
**** 3.1. Comments on variables and constants should describe their contents not their purpose
**** 3.2. Always document public symbols
*** Package Design
**** 4.1. A good package starts with its name
**** 4.2. Avoid package names like base, common, or util
**** 4.3. Return early rather than nesting deeply
**** 4.4. Make the zero value useful
**** 4.5. Avoid package level state
*** Project Structure
**** 5.1. Consider fewer, larger packages
**** 5.2. Keep package main small as small as possible
*** API Design
**** 6.1. Design APIs that are hard to misuse.
**** 6.2. Design APIs for their default use case
**** 6.3. Let functions define the behaviour they requires
*** Error handling
**** 7.1. Eliminate error handling by eliminating errors
**** 7.2. Only handle an error once
*** Concurrency
**** 8.1. Keep yourself busy or do the work yourself
**** 8.2. Leave concurrency to the caller
**** 8.3. Never start a goroutine without knowning when it will stop
** http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/
* command line interface
** COMMAND
*** GIT
**** COMMAND
***** CLONE
****** BARE
- BARE REPOS
#+begin_example sh
git clone --bare <url> or git init --bare faf0c6
#+end_example

***** GC
****** This command operates on items in the .git/objects directory and compresses them, removes duplicates, and improves the speed and efficiency of your git repo.

#+begin_example sh
git gc
#+end_example
***** GREP
****** Runs grep on the files in the repository
https://youtu.be/kfLrSERFgQo?t=327

#+begin_example sh
git grep search-term
#+end_example
***** Pretty Log Output
****** git log
 - Pretty Log Output (PLOG)
#+begin_example shell
git config --global  alias.plog "log --graph --format='%Cgreen%h %Cred%aN%Cblue%d%Creset %s %C(yellow)(%cr)%Creset'"
#+end_example
****** Log stats by commit
#+begin_example shell
git log --stat
#+end_example
****** See Top contributors
#+begin_example shell
git shortlog -sn
#+end_example

***** RESET
Open a cloned repository from a particular commit
- [Stack Overflow](https://stackoverflow.com/questions/3555107/git-clone-particular-version-of-remote-repository)
#+begin_example shell
git clone [remote_address_here] my_repo
cd my_repo
git reset --hard [ENTER HERE THE COMMIT HASH YOU WANT]
#+end_example
***** STASH
****** git stash
******* push
#+begin_example sh
git stash push
#+end_example
- Creates a *Box* line an array method.
  - Puts all the changes inside of it.
  - Shoves that box in the corner of a room
  - And gives a clean working tree.
- The box is portable now.
  - Switch to any other branch and open the box there.
  - Open and take out all the changes.
******* pop
#+begin_example sh
git stash pop
#+end_example
- Opens the box and applies all stashed changes to the current working tree.
- Useful when few changes were made, but,
  - Forgot to make a new branch and are still on `master`/`main`.
  - And need to move all new changes to the actual feature branch.
****** Saving and moving changes
- You're on master/main, and you have changes to docs and you're about to make a commit,
- but you realize "oh crap, I'm still on master, I needed to put this on a feature branch!"

You can run:

#+begin_example sh
git stash push
#+end_example

- To basically package up all those uncommitted changes into a "box" and
- shove it into a corner returning to a master branch that is a mirror of remote master (CLEAN!)

Then make your branch, switch to it and run:

#+begin_example sh
git stash pop
#+end_example

to grab your changes and put them onto the current working branch.

***** WORKTREE
 Git's Best And Most Unknown Feature: https://youtu.be/2uEqYw-N8uE
****** Create a bare repo and start making new worktrees
#+begin_example sh
git worktree add main
#+end_example
- This means that a copy of the repo files is made for each worktree at the source commit that the bare repo was made from
- Worktrees make it easier to open multiple repo branches at once under a unified workspace for easy switching of work between multiple features
- Doesn't lend itself to easy updating.
  - The bare repo doesn't `git pull` itself but the worktrees after creation can use `git pull` but this is not ideal. The bare repo is basically frozen at a single commit for all new worktrees made.

****** Making Worktrees
******* Make a bare repo
There's nothing in it, none of the files from the repo just git stuff
#+begin_example sh
git clone --bare <repo url.git> <name of the folder to create>
# ex:
git clone --bare git@github.com:lloydlobo/CV.git CV
#+end_example
******* It takes the current commit at the HEAD of the repo (git pull at you're at the most recent)
This way you're working with 3 folders basically 3 branches of the same repo but simultaneously.

NO SWITCHING BACK & AND FORTH ü§ØÔ∏èü§ØÔ∏èü§ØÔ∏è
#+begin_example sh
git worktree add master
git worktree add test
git worktree add feature
#+end_example
*** PIPING
**** (cat/tac) | (less/pg/more..)
Concatenate: Show output content with one scroll length and not the end
- https://www.guru99.com/linux-pipe-grep.html

***** The pipe takes output of `cat` to `less`.
"When you use ‚Äòcat‚Äô command to view a file which spans multiple pages, the prompt quickly jumps to the last page of the file,
and you do not see the content in the middle."

#+begin_src shell
cat ~/.bashrc | less
#+end_src

***** "And, you can view the file in digestible bits and scroll down by simply hitting the enter key."
`-n` flag for showing line numbers
#+begin_src shell
cat -n ~/.bashrc | more
#+end_src

- Both modern "more" and the freeware "less" are providing this feature, making pg somewhat obsolete. `pg` for pager
#+begin_src shell
cat -n ~/.bashrc | pg
#+end_src

**** grep
#+begin_example
syntax: `grep search_string`
#+end_example
***** grep --options -(v,c,n,i,l)
#+begin_example shell
grep -v string # Shows all the lines that do not match the searched string
grep -c string # Displays only the count of matching lines
grep -n string # Shows the matching line and its number
grep -i string # Match both (upper and lower) case
grep -l string # Shows just the name of the file with the string
#+end_example
****** cat <file> | grep -i : Match both (upper & lower case)
#+begin_src shell
cat -n ~/.bashrc | grep -i x | less
#+end_src
****** cat <file> | grep -c : Show matching line & its number
#+begin_src shell
cat ~/.bashrc | grep -c x | less
#+end_src

#+RESULTS:
: 48
***** cat | less | grep
#+begin_src shell
cat ~/.bashrc | less | grep export
#+end_src

***** fd <pattern> --exec <cmd> | less | grep <search_string>
#+begin_src shell
fd bash --exec cat -n | less | grep export
#+end_src

#+RESULTS:
: 06:51  ‚ûú  fd bash --exec cat -n | less | grep export
:     5  export GO111MODULE=on
:     7  export GO111MODULE=on
:    30  export GO111MODULE=off
:     6  export GO111MODULE=on
:    31  export GO111MODULE=off
:     5  export GO111MODULE=on
:     7  export GO111MODULE=off
:     5  export GO111MODULE=on
:     5  export GONOSUMDB=*/text # rsc.io/text but not golang.org/x/text
:    44                  "SC2034", // PREFIX appears unused. Verify it or export it.
:    44                  "SC2034", // PREFIX appears unused. Verify it or export it.

**** sort
This command helps in sorting out the contents of a file alphabetically.

#+begin_example
syntax: `sort Filename`
#+end_example

***** sort | cat
#+begin_src shell
sort ~/hist.org | cat -n
#+end_src

#+RESULTS:
| 1 |       |
| 2 | apple |
| 3 | hello |
| 4 | world |

***** sort --flags
#+begin_src shell
echo (cd & pwd) & sort -r ~/hist.org | cat -n  # -r: reverse sorting
cd & echo (pwd) & sort -n ~/hist.org | cat -n  # -n: sort numerically
cd & echo (pwd) & sort -f ~/hist.org | cat -n  # -f: case insensitive sorting
#+end_src

**** curl
#+begin_src shell
curl "https://en.wikipedia.org/wiki/Pipeline_(Unix)" |
sed 's/[^a-zA-Z ]/ /g' |
tr 'A-Z ' 'a-z\n' |
grep '[a-z]' |
sort -u |
comm -23 - <(sort /usr/share/dict/words) |
less
#+end_src

#+begin_src shell
curl "https://en.wikipedia.org/wiki/Pipeline_(Unix)" |
sed 's/[^a-zA-Z ]/ /g' |
tr 'A-Z ' 'a-z\n' |
grep '[a-z]' |
sort -u |
comm -23 - <(sort /usr/share/dict/words) |
fzf
#+end_src
**** Filter: awk, grep, sed, spell, and wc.
When you pipe two commands, the ‚Äúfiltered ‚Äù output of the first command is given to the next.

***** Highlight lines that do not have ‚Äòa‚Äô & output result in reverse order.
#+begin_src shell
cat -n ~/hist.org | grep -v a | sort -r
cat -n ~/hist.org | grep -l a
#+end_src

#+RESULTS:
| 6	-1           |
| 5	11           |
| 4	1            |
| 2	world        |
| 1	hello        |
| (standard input) |

*** Individual
**** tldr
**** rg (ripgrep)
**** hyperfine
**** z (zoxide)
**** fd
***** Execute a command on each search result returned:
#+begin_example shell
fd pattern --exec command
#+end_example

#+begin_src shell
fd --extension js
# qutebrowser/greasemonkey/darkreader.js
#+end_src

#+RESULTS:

**** cd
Go to current directory in tmux panes
#+begin_src shell
pwd | xclip -i      # pane1: copy present working directory path.
cd (xclip)          # pane2: change directory to pasted path.
#+end_src

* database
** PARADIGMS
*** NOSQL
*** SQL
** TOOLS
*** FIREBASE
*** SUPABASE
* front-end
** ANGULAR
** REACT
** SVELTE
* git
** SETUP
** WORKFLOW
*** TRADITIONAL
*** WORKTREE
* git hosting
** GITHUB
** GITLAB
* languages
** COMPILED LANGUAGE
*** C
**** Valgrind - Memory error detector
#+begin_src shell
valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes <./program>

#+end_src
**** Types, format codes, operators
#+URL: https://cs50.harvard.edu/x/2022/notes/1/#types-format-codes-operators
- There are many data types we can use for our variables, which indicate to our program what type of data they represent: bool, a Boolean expression of either true or false
***** Types
- bool, use boolean standard library <stdbool.h>
- char, a single character like a or 2
- double, a floating-point value with more digits than a float
- float, a floating-point value, or real number with a decimal value
- int, integers up to a certain size, or number of bits
- long, integers with more bits, so they can count higher than an int
- string, a string of characters

#+begin_src c :main no
#include <stdbool.h>
#include <stdio.h>
#include <strings.h>
#define BOOL bool

int main(int argc, char *argv[]) {
  printf("\ntypes ‚ûú \n");
  bool boolean = true;
  printf("| bool      :     %s\n", boolean ? "true" : "false");
  char *charS = "a";
  printf("| char      :     %s\n", charS);
  double d = 300.00;
  printf("| double    :     %f\n", d);
  float f = 3.33;
  printf("| float     :     %f\n", f);
  int i = 1;
  printf("| int       :     %i\n", i);
  long l = 4334423487654434;
  printf("| long      :     %li\n", l);
  char strings[] = "strings are char <variable>[]";
  printf("| strings   :     %s\n", strings);
  return 0;
}

#+end_src

***** CS50
****** And the CS50 Library has corresponding functions to get input of various types:
#+begin_src c
get_char
get_double
get_float
get_int
get_long
get_string
#+end_example
****** For printf, too, there are different placeholders for each type, called format codes:
#+begin_example c
%c for chars
%f for floats or doubles
%i for ints
%li for long integers
%s for strings
#+end_example
****** There are several mathematical operators we can use, too:
#+begin_example c
+ for addition
- for subtraction
#+end_example

*** GO
**** Formating
**** Naming Conventions
***** Files
Go follows a convention where source files are all lower case with underscore separating multiple words.
Compound file names are separated with _
File names that begin with ‚Äú.‚Äù or ‚Äú_‚Äù are ignored by the go tool
Files with the suffix _test.go are only compiled and run by the go test tool.
***** Functions and Methods
Use camel case, exported functions should start with uppercase:

writeToDB // unexported, only visible within the package
WriteToDB // exported, visible within the package
***** Constants
Constant should use all capital letters and use underscore _ to separate words.

***** Variables
Generally, use relatively simple (short) name.
Consistent naming style should be used the entire source code
user to u

userID to uid

If variable type is bool, its name should start with Has, Is, Can or Allow, etc.
Single letter represents index: i, j, k
Dave has an excellent article on wriing good and quality Go https://dave.cheney.net/practical-go/presentations/qcon-china.html

**** Linting
***** golangci-lint run ./...
**** OS (exec.Command, ...)
***** EXEC
****** CMD
******* StdinPipe
https://stackoverflow.com/questions/10781516/how-to-pipe-several-commands-in-go
StdoutPipe returns a pipe that will be connected to the command's standard output when the command starts. The pipe will be closed automatically after Wait sees the command exit.

(from http://golang.org/pkg/os/exec/#Cmd.StdinPipe )

The fact you do c1.Wait closes the stdoutPipe.

I made a working example (just a demo, add error catching!) :
#+begin_src go
package main

import (
    "bytes"
    "io"
    "os"
    "os/exec"
)

func main() {
    c1 := exec.Command("ls")
    c2 := exec.Command("wc", "-l")

    r, w := io.Pipe()
    c1.Stdout = w
    c2.Stdin = r

    var b2 bytes.Buffer
    c2.Stdout = &b2

    c1.Start()
    c2.Start()
    c1.Wait()
    w.Close()
    c2.Wait()
    io.Copy(os.Stdout
#+end_src
******* Simple Chaining or piping commands
- For simple scenarios, you could use this approach:
#+begin_example go
bash -c "echo 'your command goes here'"
#+end_example
- For example, this function retrieves the CPU model name using piped commands:
#+begin_src go :main no
func getCPUmodel() string {
        cmd := "cat /proc/cpuinfo | egrep '^model name' | uniq | awk '{print substr($0, index($0,$4))}'"
        out, err := exec.Command("bash","-c",cmd).Output()
        if err != nil {
                return fmt.Sprintf("Failed to execute command: %s", cmd)
        }
        return string(out)
}
#+end_src
******* Use slice of args for os.exec.Command
URL: https://stackoverflow.com/a/66487591
******** From the os/exec documentation:

Unlike the "system" library call from C and other languages, the os/exec package intentionally does not invoke the system shell and does not expand any glob patterns or handle other expansions, pipelines, or redirections typically done by shells.

Since the arg ...string parameter of exec.Command() isn't processed by a shell, each argument is handed to the command exactly as specified. In your case, the entire content of metaData is provided to geth as a single argument.

You should instead create a slice of strings, each containing a single argument. And then provide that slice as the arg parameter using the ... notation.

******** Here's an example demonstrating this, using the uname command:
#+begin_src go

package main

import (
    "fmt"
    "os/exec"
)

func main() {
    command := "uname"
    argsString := "--kernel-name --machine"
    argsSlice := []string{"--kernel-name", "--machine"}

    // Equivalent command:
    // $ uname "--kernel-name --machine"
    fmt.Println("exec.Command(command, argsString)")
    stringOutput, err := exec.Command(command, argsString).CombinedOutput()
    if err != nil {
        fmt.Printf("Failed: %s\n", err)
    }
    fmt.Printf("Output:\n%s\n", stringOutput)

    // Equivalent command:
    // $ uname --kernel-name --machine
    fmt.Println("exec.Command(command, argsSlice)")
    sliceOutput, err := exec.Command(command, argsSlice...).CombinedOutput()
    if err != nil {
        fmt.Printf("Failed: %s", err)
    }
    fmt.Printf("Output:\n%s\n", sliceOutput)
}

#+end_src

And it's ouput:
#+begin_src shell

$ go run main.go
exec.Command(command, argsString)
Failed: exit status 1
Output:
uname: unrecognized option '--kernel-name --machine'
Try 'uname --help' for more information.

exec.Command(command, argsSlice)
Output:
Linux x86_64
#+end_src
**** Web Development
***** GoWebByExamples
https://gowebexamples.com/
**** Pointers
***** Derefrencing slice pointer for indexing. (*p)[index]
https://stackoverflow.com/a/51087975
****** Write (*p) to dereference the pointer p:
#+begin_src go
package main

import (
    "fmt"
)

func main() {
    txs := make([]string, 2)
    txs[0] = "A"
    p := &txs
    fmt.Println((*p)[0])
}
#+end_src
Playground: https://play.golang.org/p/6Ex-3jtmw44

Output:
#+begin_src shell
A
#+end_src
**** Gotchas, Common mistakes.
- http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/
***** Level 0: Total Beginner:

Opening Brace Can't Be Placed on a Separate Line
Unused Variables
Unused Imports
Short Variable Declarations Can Be Used Only Inside Functions
Redeclaring Variables Using Short Variable Declarations
Can't Use Short Variable Declarations to Set Field Values
Accidental Variable Shadowing
Can't Use "nil" to Initialize a Variable Without an Explicit Type
Using "nil" Slices and Maps
Map Capacity
Strings Can't Be "nil"
Array Function Arguments
Unexpected Values in Slice and Array "range" Clauses
Slices and Arrays Are One-Dimensional
Accessing Non-Existing Map Keys
Strings Are Immutable
Conversions Between Strings and Byte Slices
Strings and Index Operator
Strings Are Not Always UTF8 Text
String Length
Missing Comma In Multi-Line Slice/Array/Map Literals
log.Fatal and log.Panic Do More Than Log
Built-in Data Structure Operations Are Not Synchronized
Iteration Values For Strings in "range" Clauses
Iterating Through a Map Using a "for range" Clause
Fallthrough Behavior in "switch" Statements
Increments and Decrements
Bitwise NOT Operator
Operator Precedence Differences
Unexported Structure Fields Are Not Encoded
App Exits With Active Goroutines
Sending to an Unbuffered Channel Returns As Soon As the Target Receiver Is Ready
Sending to an Closed Channel Causes a Panic
Using "nil" Channels
Methods with Value Receivers Can't Change the Original Value
***** Level 1: Intermediate Beginner:

Closing HTTP Response Body
Closing HTTP Connections
JSON Encoder Adds a Newline Character
JSON Package Escapes Special HTML Characters in Keys and String Values
Unmarshalling JSON Numbers into Interface Values
JSON String Values Will Not Be Ok with Hex or Other non-UTF8 Escape Sequences
Comparing Structs, Arrays, Slices, and Maps
Recovering From a Panic
Updating and Referencing Item Values in Slice, Array, and Map "for range" Clauses
"Hidden" Data in Slices
Slice Data Corruption
"Stale" Slices
Type Declarations and Methods
Breaking Out of "for switch" and "for select" Code Blocks
Iteration Variables and Closures in "for" Statements
Deferred Function Call Argument Evaluation
Deferred Function Call Execution
Failed Type Assertions
Blocked Goroutines and Resource Leaks
Same Address for Different Zero-sized Variables
The First Use of iota Doesn't Always Start with Zero
***** Level 2: Advanced Beginner:

Using Pointer Receiver Methods On Value Instances
Updating Map Value Fields
"nil" Interfaces and "nil" Interfaces Values
Stack and Heap Variables
GOMAXPROCS, Concurrency, and Parallelism
Read and Write Operation Reordering
Preemptive Scheduling
Cgo (aka Brave Beginner):

Import C and Multiline Import Blocks
No blank lines Between Import C and Cgo Comments
Can't Call C Functions with Variable Arguments

*** RUST
** INTERPRETED LANGUAGE
*** BASH
*** JAVASCRIPT
*** LUA
*** TYPESCRIPT
** MARKUP LANGUAGE
*** CSS
*** HTML
*** MARKDOWN
*** ORG
* servers
** HOSTING
*** SERVICE
**** HEROKU
**** NETLIFY
**** VERCEL
* tools
** TEXT EDITORS
*** EMACS
**** ORG MODE
***** TANGLE
****** org babel tangle file without main function (:main no)
- [Stack Overflow](https://stackoverflow.com/a/26068956)
  - [Documentation](https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html#orgca44b07)
  - :main can be set to "no" to inhibit wrapping of the code block in a main function call.

#+begin_src go :main no
// Code goes here
#+end_src
****** Wrap the list of languages you want to use with org-babel inside the with-eval-after-load block
#+begin_src emacs-lisp
(with-eval-after-load 'org
(org-babel-do-load-languages 'org-babel-load-languages '((ruby . t)
(plantuml . t)
)))
#+end_src
***** INCLUDE FILES
****** Org mode 8.3+ supports this.
- [Documentation](https://orgmode.org/manual/Include-Files.html)
- URL: https://stackoverflow.com/a/29401769

******* C-c ' (org-edit~special)
 This command allows navigating to the included document:
- Visit the included file at point.
- During export, you can include the content of another file. For example, to include your ‚Äò.emacs‚Äô file, you could use:
    The first parameter is the file name to include. The optional second parameter specifies the block type: ‚Äòexample‚Äô, ‚Äòexport‚Äô or ‚Äòsrc‚Äô. The optional third parameter specifies the source code language to use for formatting the contents. This is relevant to both ‚Äòexport‚Äô and ‚Äòsrc‚Äô block types.
#+begin_src emacs-lisp
#+INCLUDE: "~/.emacs" src emacs-lisp
#+end_src

- For example: (this) will include the first 20 lines of the headline named conclusion.
#+begin_src emacs-lisp
#+INCLUDE: "./paper.org::*conclusion" :lines 1-20
#+end_src

- Also, to include a heading by its CUSTOM_ID property (suppose it is Sec: Introduction):
#+begin_src emacs-lisp
#+INCLUDE: "./paper.org::#Sec: Introduction"
#+end_src

- I found :only-contents t works well for my application (I'm including a subtree from another org file for a beamer presentation):
#+begin_src emacs-lisp
#+INCLUDE: "./paper.org::*conclusion" :only-contents t
#+end_src

*** VIM / NEOVIM
**** MACROS
***** Register a macro:
****** To record a macro and save it to a register:
  - type the key q followed by a letter from a to z that represents the register to save the macro,
  - followed by all commands you want to record, and
  - then type the key q again to stop the recording.

#+begin_example
q<register><commands>q
#+end_example

****** To execute the recorded macro wit `@+register`:
#+begin_example
@<register>
#+end_example

****** Examples:
******* Record a basic macro that inserts a new line and save it to register a, use this sequence:
[Use Vim macros to automate frequent tasks][https://www.redhat.com/sysadmin/use-vim-macros]
#+begin_example
qao<ESC>q
#+end_example

******* Wrap quotes on each elements of an array
#+begin_example
# vwh " "www^[
# Macro keys used:
qn          # recording@n.
vwh         # select word and `h` to go left as , gets selected.
<leader>"   # here leader key is space` `. and a cmd to wrap "quotes" around in visual mode.
www         # Move 3 words to the right on the next element.
CTRL-[      # Escape or C-[ or jk or jj.
# Finally press q to exit macro recording mode.

# Next Press:
@n          # Shift-2 or `@` and `n` to apply macro changes on each keypress.
#+end_example

*** VS CODE
* unix
** SHELLS
*** BASH
*** FISH
*** ZSH
** KERNEL

