#+TITLE: devlog
#+AUTHOR: lloydlobo
#+DESCRIPTION: Developer Log Notes
#+STARTUP: overview
#+OPTIONS: num:nil ^:{}
# #+PROPERTY: header-args :tangle yes :results none
-----

* TABLE OF CONTENTS :toc:
- [[#backend][BACKEND]]
  - [[#express][EXPRESS]]
  - [[#go][GO]]
  - [[#nodejs][NODEJS]]
- [[#cli][CLI]]
  - [[#command][COMMAND]]
- [[#database][DATABASE]]
  - [[#paradigms][PARADIGMS]]
  - [[#tools][TOOLS]]
- [[#frontend][FRONTEND]]
  - [[#angular][ANGULAR]]
  - [[#react][REACT]]
  - [[#svelte][SVELTE]]
- [[#git][GIT]]
  - [[#setup][SETUP]]
  - [[#workflow][WORKFLOW]]
- [[#git-hosting][GIT HOSTING]]
  - [[#github][GITHUB]]
  - [[#gitlab][GITLAB]]
- [[#languages][LANGUAGES]]
  - [[#compiled-language][COMPILED LANGUAGE]]
  - [[#interpreted-language][INTERPRETED LANGUAGE]]
  - [[#markup-language][MARKUP LANGUAGE]]
- [[#os][OS]]
  - [[#linux--unix][LINUX | UNIX]]
- [[#servers][SERVERS]]
  - [[#hosting][HOSTING]]
- [[#tools-1][TOOLS]]
  - [[#text-editors][TEXT EDITORS]]
- [[#unix][UNIX]]
  - [[#shell][SHELL]]
  - [[#commands][COMMANDS]]
  - [[#kernel][KERNEL]]

* BACKEND
** EXPRESS
** GO
** NODEJS
* CLI
** COMMAND
*** GIT
**** COMMAND
***** CLONE
****** BARE
- BARE REPOS
#+begin_example sh
git clone --bare <url> or git init --bare faf0c6
#+end_example

***** GC
****** This command operates on items in the .git/objects directory and compresses them, removes duplicates, and improves the speed and efficiency of your git repo.

#+begin_example sh
git gc
#+end_example
***** GREP
****** Runs grep on the files in the repository
https://youtu.be/kfLrSERFgQo?t=327

#+begin_example sh
git grep search-term
#+end_example
***** Pretty Log Output
****** git log
 - Pretty Log Output (PLOG)
#+begin_example shell
git config --global  alias.plog "log --graph --format='%Cgreen%h %Cred%aN%Cblue%d%Creset %s %C(yellow)(%cr)%Creset'"
#+end_example
****** Log stats by commit
#+begin_example shell
git log --stat
#+end_example
****** See Top contributors
#+begin_example shell
git shortlog -sn
#+end_example

***** RESET
Open a cloned repository from a particular commit
- [Stack Overflow](https://stackoverflow.com/questions/3555107/git-clone-particular-version-of-remote-repository)
#+begin_example shell
git clone [remote_address_here] my_repo
cd my_repo
git reset --hard [ENTER HERE THE COMMIT HASH YOU WANT]
#+end_example
***** STASH
****** git stash
******* push
#+begin_example sh
git stash push
#+end_example
- Creates a *Box* line an array method.
  - Puts all the changes inside of it.
  - Shoves that box in the corner of a room
  - And gives a clean working tree.
- The box is portable now.
  - Switch to any other branch and open the box there.
  - Open and take out all the changes.
******* pop
#+begin_example sh
git stash pop
#+end_example
- Opens the box and applies all stashed changes to the current working tree.
- Useful when few changes were made, but,
  - Forgot to make a new branch and are still on `master`/`main`.
  - And need to move all new changes to the actual feature branch.
****** Saving and moving changes
- You're on master/main, and you have changes to docs and you're about to make a commit,
- but you realize "oh crap, I'm still on master, I needed to put this on a feature branch!"

You can run:

#+begin_example sh
git stash push
#+end_example

- To basically package up all those uncommitted changes into a "box" and
- shove it into a corner returning to a master branch that is a mirror of remote master (CLEAN!)

Then make your branch, switch to it and run:

#+begin_example sh
git stash pop
#+end_example

to grab your changes and put them onto the current working branch.

***** WORKTREE
 Git's Best And Most Unknown Feature: https://youtu.be/2uEqYw-N8uE
****** Create a bare repo and start making new worktrees
#+begin_example sh
git worktree add main
#+end_example
- This means that a copy of the repo files is made for each worktree at the source commit that the bare repo was made from
- Worktrees make it easier to open multiple repo branches at once under a unified workspace for easy switching of work between multiple features
- Doesn't lend itself to easy updating.
  - The bare repo doesn't `git pull` itself but the worktrees after creation can use `git pull` but this is not ideal. The bare repo is basically frozen at a single commit for all new worktrees made.

****** Making Worktrees
******* Make a bare repo
There's nothing in it, none of the files from the repo just git stuff
#+begin_example sh
git clone --bare <repo url.git> <name of the folder to create>
# ex:
git clone --bare git@github.com:lloydlobo/CV.git CV
#+end_example
******* It takes the current commit at the HEAD of the repo (git pull at you're at the most recent)
This way you're working with 3 folders basically 3 branches of the same repo but simultaneously.

NO SWITCHING BACK & AND FORTH ü§ØÔ∏èü§ØÔ∏èü§ØÔ∏è
#+begin_example sh
git worktree add master
git worktree add test
git worktree add feature
#+end_example

* DATABASE
** PARADIGMS
*** NOSQL
*** SQL
** TOOLS
*** FIREBASE
*** SUPABASE
* FRONTEND
** ANGULAR
** REACT
** SVELTE
* GIT
** SETUP
** WORKFLOW
*** TRADITIONAL
*** WORKTREE
* GIT HOSTING
** GITHUB
** GITLAB
* LANGUAGES
** COMPILED LANGUAGE
*** GO
**** Formating
**** Linting
***** golangci-lint run ./...
*** RUST
*** BASH
** INTERPRETED LANGUAGE
*** JAVASCRIPT
*** LUA
*** TYPESCRIPT
** MARKUP LANGUAGE
*** CSS
*** HTML
*** MARKDOWN
*** ORG
* OS
** LINUX | UNIX
*** Commands
**** Piping
***** (cat/tac) | (less/pg/more..): Concatenate: Show output content with one scroll length and not the end
- https://www.guru99.com/linux-pipe-grep.html

****** The pipe takes output of `cat` to `less`.
"When you use ‚Äòcat‚Äô command to view a file which spans multiple pages, the prompt quickly jumps to the last page of the file,
and you do not see the content in the middle."

#+begin_src shell
cat ~/.bashrc | less
#+end_src

****** "And, you can view the file in digestible bits and scroll down by simply hitting the enter key."
`-n` flag for showing line numbers
#+begin_src shell
cat -n ~/.bashrc | more
#+end_src

- Both modern "more" and the freeware "less" are providing this feature, making pg somewhat obsolete. `pg` for pager
#+begin_src shell
cat -n ~/.bashrc | pg
#+end_src

***** grep
syntax: `grep search_string`

****** cat | less | grep
#+begin_src shell
cat ~/.bashrc | less | grep export
#+end_src

****** fd <pattern> --exec <cmd> | less | grep <search_string>
#+begin_src shell
fd bash --exec cat -n | less | grep export
#+end_src

#+RESULTS:
: 06:51  ‚ûú  fd bash --exec cat -n | less | grep export
:     5  export GO111MODULE=on
:     7  export GO111MODULE=on
:    30  export GO111MODULE=off
:     6  export GO111MODULE=on
:    31  export GO111MODULE=off
:     5  export GO111MODULE=on
:     7  export GO111MODULE=off
:     5  export GO111MODULE=on
:     5  export GONOSUMDB=*/text # rsc.io/text but not golang.org/x/text
:    44                  "SC2034", // PREFIX appears unused. Verify it or export it.
:    44                  "SC2034", // PREFIX appears unused. Verify it or export it.

* SERVERS
** HOSTING
*** SERVICE
**** HEROKU
**** NETLIFY
**** VERCEL
* TOOLS
** TEXT EDITORS
*** EMACS
**** ORG MODE
***** TANGLE
****** org babel tangle file without main function (:main no)
- [Stack Overflow](https://stackoverflow.com/a/26068956)
  - [Documentation](https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-C.html#orgca44b07)
  - :main can be set to "no" to inhibit wrapping of the code block in a main function call.

#+begin_src go :main no
// Code goes here
#+end_src
***** INCLUDE FILES
****** Org mode 8.3+ supports this.
- [Documentation](https://orgmode.org/manual/Include-Files.html)
- URL: https://stackoverflow.com/a/29401769

******* C-c ' (org-edit~special)
 This command allows navigating to the included document:
- Visit the included file at point.
- During export, you can include the content of another file. For example, to include your ‚Äò.emacs‚Äô file, you could use:
    The first parameter is the file name to include. The optional second parameter specifies the block type: ‚Äòexample‚Äô, ‚Äòexport‚Äô or ‚Äòsrc‚Äô. The optional third parameter specifies the source code language to use for formatting the contents. This is relevant to both ‚Äòexport‚Äô and ‚Äòsrc‚Äô block types.
#+begin_src emacs-lisp
#+INCLUDE: "~/.emacs" src emacs-lisp
#+end_src

- For example: (this) will include the first 20 lines of the headline named conclusion.
#+begin_src emacs-lisp
#+INCLUDE: "./paper.org::*conclusion" :lines 1-20
#+end_src

- Also, to include a heading by its CUSTOM_ID property (suppose it is Sec: Introduction):
#+begin_src emacs-lisp
#+INCLUDE: "./paper.org::#Sec: Introduction"
#+end_src

- I found :only-contents t works well for my application (I'm including a subtree from another org file for a beamer presentation):
#+begin_src emacs-lisp
#+INCLUDE: "./paper.org::*conclusion" :only-contents t
#+end_src

*** VIM / NEOVIM
**** MACROS
***** Register a macro:
****** To record a macro and save it to a register:
  - type the key q followed by a letter from a to z that represents the register to save the macro,
  - followed by all commands you want to record, and
  - then type the key q again to stop the recording.

#+begin_example
q<register><commands>q
#+end_example

****** To execute the recorded macro wit `@+register`:
#+begin_example
@<register>
#+end_example

****** Examples:
******* Record a basic macro that inserts a new line and save it to register a, use this sequence:
[Use Vim macros to automate frequent tasks][https://www.redhat.com/sysadmin/use-vim-macros]
#+begin_example
qao<ESC>q
#+end_example

******* Wrap quotes on each elements of an array
#+begin_example
# vwh " "www^[
# Macro keys used:
qn          # recording@n.
vwh         # select word and `h` to go left as , gets selected.
<leader>"   # here leader key is space` `. and a cmd to wrap "quotes" around in visual mode.
www         # Move 3 words to the right on the next element.
CTRL-[      # Escape or C-[ or jk or jj.
# Finally press q to exit macro recording mode.

# Next Press:
@n          # Shift-2 or `@` and `n` to apply macro changes on each keypress.
#+end_example


*** VS CODE
* UNIX
** SHELL
*** BASH
*** FISH
*** ZSH
** COMMANDS
*** tldr
*** rg (ripgrep)
*** hyperfine
*** z (zoxide)
** KERNEL
